# Remove .sample to activate this file
#
# Use this file to control common settings for all stages.
# Since version 1.3.7 it is possible to use OS-Environment variables like
# mySetting=${ANY_OS_VARIABLE}
# or
# mySetting=Hello ${ANY_OS_VARIABLE}
#

# This user is the primary user
# might be an Admin or OrgAdmin
# username=orgAdminUserABC
# password=orgAdminPassword

# Hostname the API-Manager is listening
# host=api-manager.customer.com

# Port the API-Manager is listening. Defaults to 8075
# port=8175

# Control how breaking changes should be applied. Defaults to false
# force=true

# Should defined quotas being used or not. Defaults to false
# ignoreQuotas=true

# Controls how configured Client-Applications are treated. Defaults to add!
# clientAppsMode=replace
# clientAppsMode=ignore
# clientAppsMode=add

# Controls how configured Client-Organizations are treated. Defaults to add!
# clientOrgsMode=replace
# clientOrgsMode=ignore
# clientOrgsMode=add

# Controls how configured Quotas are treated. Defaults to add!
# quotaMode=add
# quotaMode=ignore
# quotaMode=replace



# Normally, in case of an error created BE- or FE-API is rolled back, so that the
# API-Manager stays in a clean state. With that parameter you can turn off rollback if needed.
# rollback=false

# If an API is given with key remotehost by default the CLI validates this remote hosts exists.
# Use this toggle to turn off this validation.
# validateRemoteHost=false

# With this parameter you can map return-codes created by the APIM-CLI into any return-code you
# want.
# The following example maps the return code 10 (NO_CHANGE) and 56 (UNKNOWN_API) into a SUCCESS.
# Call apim api import with option: -returncodes to see all possible return codes.
# returnCodeMapping=10:0, 56:0

# If a published API can be updated without the need to re-import the
# backend API (e.g. changing a policy, tags, etc.), the frontend API is unpublished,
# changed and then republished.
# This process only takes a few seconds, but technically leads to a short downtime for consumers.
# The advantage is that in this mode the API-ID and used runtime quotas of applications are preserved.
# This is the default behavior since version 1.3.0.
#
# You can set the switch zeroDowntimeUpdate to true to update APIs with zero downtime as before.
# That means that when updating a published API, the CLI always creates a completely new API,
# configures it according to the old API and finally clients are switched to the new API.
# This new API then has a new ID and runtime quotas are lost. The configured quotas are
# transferred to the new API.
# zeroDowntimeUpdate=true

# Use the following parameters to configure a proxy for the APIM CLI
# You can pass them either globally in env.properties, per
# stage (e.g. env.prod.properties) or individually as command-line parameters.
# httpProxyHost=proxyHost
# httpProxyPort=8987
# httpProxyUsername=proxyUser
# httpProxyPassword=proxyPassword

# If the API-Manager REST-API endpoint is not exposed at the standard location (e.g. /api/portal/v1.3)
# you can use this parameter to override it.
# Best is to configure it an environment file, but you can also use a command line argument:
# (-apiBasepath /fr/apim/v13/portal)
# Example:
# apiBasepath=/fr/apim/v13/portal

# You may set the retryDelay parameter if you experience quite often unexpected responses from the
# API-Manager REST-API. For instance, reporting an Unknown API for an API just created, while trying
# to create access for it.
# This may occur more often, when you have more APIs, Applications, etc. in your API-Manager registry.
# The APIM-CLI will try again such requests if the response is unexpected. As all other parameters you
# can also set it as a command line parameter: -retryDelay 3000. See issue: #213 for more details.
# Defaults to 1000 (1 second)
# Example delay of 2 seconds:
# retryDelay=2000
