package com.axway.apim.export.test.basic;

import com.axway.apim.EndpointConfig;
import com.axway.apim.export.test.ExportTestAction;
import com.axway.apim.test.ImportTestAction;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.citrusframework.annotations.CitrusResource;
import org.citrusframework.annotations.CitrusTest;
import org.citrusframework.context.TestContext;
import org.citrusframework.functions.core.RandomNumberFunction;
import org.citrusframework.testng.spring.TestNGCitrusSpringSupport;
import org.springframework.test.context.ContextConfiguration;
import org.testng.annotations.Optional;
import org.testng.annotations.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

import static org.citrusframework.DefaultTestActionBuilder.action;
import static org.citrusframework.actions.EchoAction.Builder.echo;
import static org.testng.Assert.*;


@ContextConfiguration(classes = {EndpointConfig.class})
public class ImageAPIExportTestIT extends TestNGCitrusSpringSupport {

    @CitrusTest
    @Test
    public void run(@Optional @CitrusResource TestContext context) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        ExportTestAction swaggerExport = new ExportTestAction();
        ImportTestAction swaggerImport = new ImportTestAction();
        description("Import an API to export it afterwards");
        variable("apiNumber", RandomNumberFunction.getRandomNumber(3, true));
        variable("apiPath", "/api/test/" + this.getClass().getSimpleName() + "-${apiNumber}");
        variable("apiName", this.getClass().getSimpleName() + "-${apiNumber}");
        variable("state", "unpublished");
        variable("exportLocation", "citrus:systemProperty('java.io.tmpdir')");
        variable(ExportTestAction.EXPORT_API, "${apiPath}");
        // These are the folder and filenames generated by the export tool
        variable("exportFolder", "api-test-${apiName}");
        variable("exportAPIName", "${apiName}.json");

        $(echo("####### Importing the API, which should exported in the second step #######"));
        variable(ImportTestAction.API_DEFINITION, "/test/export/files/basic/petstore.json");
        variable(ImportTestAction.API_CONFIG, "/test/export/files/basic/api-with-image.json");
        variable("image", "/com/axway/apim/test/files/basic/API-Logo.jpg");
        variable("expectedReturnCode", "0");
        $(action(swaggerImport));

        $(echo("####### Export the API from the API-Manager, we expect the image to be present and referenced #######"));
        variable("expectedReturnCode", "0");
        $(action(swaggerExport));

        String exportedAPIConfigFile = context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/api-config.json";
        $(echo("####### Reading exported API-Config file: '" + exportedAPIConfigFile + "' #######"));
        JsonNode exportedAPIConfig = mapper.readTree(Files.newInputStream(new File(exportedAPIConfigFile).toPath()));
        assertEquals(exportedAPIConfig.get("version").asText(), "1.0.0");
        assertEquals(exportedAPIConfig.get("organization").asText(), "API Development " + context.getVariable("orgNumber"));
        //assertEquals(exportedAPIConfig.get("backendBasepath").asText(), 	"https://petstore.swagger.io");
        assertEquals(exportedAPIConfig.get("state").asText(), "unpublished");
        assertEquals(exportedAPIConfig.get("path").asText(), context.getVariable("apiPath"));
        assertEquals(exportedAPIConfig.get("name").asText(), context.getVariable("apiName"));
        assertEquals(exportedAPIConfig.get("caCerts").size(), 4);
        assertEquals(exportedAPIConfig.get("image").asText(), "api-image.jpg");
        assertEquals(exportedAPIConfig.get("caCerts").get(0).get("certFile").asText(), "swagger.io.crt");
        assertFalse(exportedAPIConfig.get("caCerts").get(0).get("inbound").asBoolean());
        assertTrue(exportedAPIConfig.get("caCerts").get(0).get("outbound").asBoolean());
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/swagger.io.crt").exists(), "Certificate swagger.io.crt is missing");
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/StarfieldServicesRootCertificateAuthority-G2.crt").exists(), "Certificate StarfieldServicesRootCertificateAuthority-G2.crt is missing");
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/AmazonRootCA1.crt").exists(), "Certificate AmazonRootCA1.crt is missing");
        //assertTrue(new File(context.getVariable("exportLocation")+"/"+context.getVariable("exportFolder")+"/Amazon.crt").exists(), "Certificate Amazon.crt is missing");
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/" + context.getVariable("exportAPIName")).exists(), "Exported Swagger-File is missing");
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/api-image.jpg").exists(), "API-Image is missing");
    }
}
