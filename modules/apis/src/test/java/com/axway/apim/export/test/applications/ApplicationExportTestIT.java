package com.axway.apim.export.test.applications;

import com.axway.apim.EndpointConfig;
import com.axway.apim.api.model.apps.ClientApplication;
import com.axway.apim.export.test.ExportTestAction;
import com.axway.apim.test.ImportTestAction;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.citrusframework.annotations.CitrusResource;
import org.citrusframework.annotations.CitrusTest;
import org.citrusframework.context.TestContext;
import org.citrusframework.functions.core.RandomNumberFunction;
import org.citrusframework.http.client.HttpClient;
import org.citrusframework.message.MessageType;
import org.citrusframework.testng.spring.TestNGCitrusSpringSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ContextConfiguration;
import org.testng.annotations.Optional;
import org.testng.annotations.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;

import static org.citrusframework.DefaultTestActionBuilder.action;
import static org.citrusframework.actions.EchoAction.Builder.echo;
import static org.citrusframework.http.actions.HttpActionBuilder.http;
import static org.citrusframework.validation.DelegatingPayloadVariableExtractor.Builder.fromBody;
import static org.testng.Assert.*;


@ContextConfiguration(classes = {EndpointConfig.class})
public class ApplicationExportTestIT extends TestNGCitrusSpringSupport {

    @Autowired
    HttpClient apiManager;

    @CitrusTest
    @Test
    public void run(@Optional @CitrusResource TestContext context) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        ExportTestAction swaggerExport = new ExportTestAction();
        ImportTestAction swaggerImport = new ImportTestAction();
        description("Import an API including applications to export it afterwards");
        variable("useApiAdmin", "true"); // Use apiadmin account
        variable("apiNumber", RandomNumberFunction.getRandomNumber(3, true));
        variable("apiPath", "/api/test/" + this.getClass().getSimpleName() + "-${apiNumber}");
        variable("apiName", this.getClass().getSimpleName() + "-${apiNumber}");
        variable("state", "published");
        variable("exportLocation", "citrus:systemProperty('java.io.tmpdir')");
        variable(ExportTestAction.EXPORT_API, "${apiPath}");

        // These are the folder and filenames generated by the export tool
        variable("exportFolder", "api-test-${apiName}");
        variable("exportAPIName", "${apiName}.json");

        // ############## Creating Test-Application 1 #################
        variable("app1Name", "Consuming Test App ${apiNumber} ${orgNumber}");
        $(http().client(apiManager).send().post("/applications").message().header("Content-Type", "application/json")
            .body("{\"name\":\"${app1Name}\",\"apis\":[],\"organizationId\":\"${orgId3}\"}"));

        $(http().client(apiManager).receive().response(HttpStatus.CREATED).message().type(MessageType.JSON).extract(fromBody()
            .expression("$.id", "consumingTestApp1Id")
            .expression("$.name", "consumingTestApp1Name")));

        $(echo("####### Created Test-Application 1: '${consumingTestApp1Name}' with id: '${consumingTestApp1Id}' #######"));

        $(echo("####### Importing the API including applications, which should exported in the second step #######"));
        variable(ImportTestAction.API_DEFINITION, "/test/export/files/basic/petstore.json");
        variable(ImportTestAction.API_CONFIG, "/test/export/files/applications/1_api-with-0-org-1-app.json");
        variable("consumingTestAppName", "${consumingTestApp1Name}");
        variable("expectedReturnCode", "0");
        $(action(swaggerImport));

        $(echo("####### Export the API including applications from the API-Manager #######"));
        variable("expectedReturnCode", "0");
        $(action(swaggerExport));
        String exportedAPIConfigFile = context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/api-config.json";
        $(echo("####### Reading exported API-Config file: '" + exportedAPIConfigFile + "' #######"));
        JsonNode exportedAPIConfig = mapper.readTree(Files.newInputStream(new File(exportedAPIConfigFile).toPath()));
        assertEquals(exportedAPIConfig.get("version").asText(), "1.0.1");
        assertEquals(exportedAPIConfig.get("organization").asText(), "API Development " + context.getVariable("orgNumber"));
        //assertEquals(exportedAPIConfig.get("backendBasepath").asText(), 	"https://petstore.swagger.io");
        assertEquals(exportedAPIConfig.get("state").asText(), "published");
        assertEquals(exportedAPIConfig.get("path").asText(), context.getVariable("apiPath"));
        assertEquals(exportedAPIConfig.get("name").asText(), context.getVariable("apiName"));
        assertEquals(exportedAPIConfig.get("caCerts").size(), 4);

        assertEquals(exportedAPIConfig.get("caCerts").get(0).get("certFile").asText(), "swagger.io.crt");
        assertFalse(exportedAPIConfig.get("caCerts").get(0).get("inbound").asBoolean());
        assertTrue(exportedAPIConfig.get("caCerts").get(0).get("outbound").asBoolean());

        List<ClientApplication> exportedApps = mapper.convertValue(exportedAPIConfig.get("applications"), new TypeReference<List<ClientApplication>>() {
        });
        assertEquals(exportedApps.size(), 1, "Number of exported apps not correct");
        ClientApplication app = exportedApps.get(0);
        assertTrue(app.getApiAccess() == null || app.getApiAccess().isEmpty(), "Exported Apps should not contains API-Access");
        assertNull(app.getId(), "The ID of an application shouldn't be exported.");
        assertNull(app.getOrganization(), "The Org-ID of an application shouldn't be exported.");
        assertNull(app.getAppQuota(), "The application quota should not be exported. It's not supported by the export!");
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/swagger.io.crt").exists(), "Certificate swagger.io.crt is missing");
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/StarfieldServicesRootCertificateAuthority-G2.crt").exists(), "Certificate StarfieldServicesRootCertificateAuthority-G2.crt is missing");
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/AmazonRootCA1.crt").exists(), "Certificate AmazonRootCA1.crt is missing");
        // assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/Amazon.crt").exists(), "Certificate Amazon.crt is missing");
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/" + context.getVariable("exportAPIName")).exists(), "Exported Swagger-File is missing");
    }
}
