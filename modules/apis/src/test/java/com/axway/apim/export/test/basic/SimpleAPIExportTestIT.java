package com.axway.apim.export.test.basic;

import com.axway.apim.EndpointConfig;
import com.axway.apim.export.test.ExportTestAction;
import com.axway.apim.test.ImportTestAction;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.citrusframework.annotations.CitrusResource;
import org.citrusframework.annotations.CitrusTest;
import org.citrusframework.context.TestContext;
import org.citrusframework.functions.core.RandomNumberFunction;
import org.citrusframework.http.client.HttpClient;
import org.citrusframework.message.MessageType;
import org.citrusframework.testng.spring.TestNGCitrusSpringSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ContextConfiguration;
import org.testng.annotations.Optional;
import org.testng.annotations.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

import static org.citrusframework.DefaultTestActionBuilder.action;
import static org.citrusframework.actions.EchoAction.Builder.echo;
import static org.citrusframework.dsl.JsonPathSupport.jsonPath;
import static org.citrusframework.http.actions.HttpActionBuilder.http;
import static org.citrusframework.validation.DelegatingPayloadVariableExtractor.Builder.fromBody;
import static org.testng.Assert.*;


@ContextConfiguration(classes = {EndpointConfig.class})
public class SimpleAPIExportTestIT extends TestNGCitrusSpringSupport {

    @Autowired
    HttpClient apiManager;

    @CitrusTest
    @Test
    public void run(@Optional @CitrusResource TestContext context) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        ExportTestAction swaggerExport = new ExportTestAction();
        ImportTestAction swaggerImport = new ImportTestAction();
        description("Import an API to export it afterwards");
        variable("apiNumber", RandomNumberFunction.getRandomNumber(3, true));
        variable("apiPath", "/api/test/" + this.getClass().getSimpleName() + "-${apiNumber}");
        variable("apiName", this.getClass().getSimpleName() + "-${apiNumber}");
        variable("state", "unpublished");
        variable("exportLocation", "citrus:systemProperty('java.io.tmpdir')");
        variable(ExportTestAction.EXPORT_API, "${apiPath}");
        // These are the folder and filenames generated by the export tool
        variable("exportFolder", "api-test-${apiName}");
        variable("exportAPIName", "${apiName}.json");
        $(echo("####### Importing the API, which should exported in the second step #######"));
        variable(ImportTestAction.API_DEFINITION, "/test/export/files/basic/petstore.json");
        variable(ImportTestAction.API_CONFIG, "/test/export/files/basic/minimal-config.json");
        variable("expectedReturnCode", "0");
        $(action(swaggerImport));

        $(echo("####### Validate the API has been imported #######"));
        $(http().client(apiManager).send().get("/proxies"));
        $(http().client(apiManager).receive().response(HttpStatus.OK).message().type(MessageType.JSON).validate(jsonPath()
                .expression("$.[?(@.path=='${apiPath}')].name", "${apiName}")
                .expression("$.[?(@.path=='${apiPath}')].state", "unpublished"))
            .extract(fromBody()
                .expression("$.[?(@.path=='${apiPath}')].id", "apiId")));

        $(echo("####### Manually configure the backend to https://yet.another.petstore/another/path --> https://yet.another.petstore/another/path/v2 ######"));
        // Get the API-Proxy object
        $(http().client(apiManager).send().get("/proxies/${apiId}"));
        $(http().client(apiManager).receive().response(HttpStatus.OK).message().type(MessageType.JSON).extract(fromBody()
            .expression("$", "apiProxy")));
        // Manually set another backend host and path
        JsonNode config = mapper.readTree(context.getVariable("apiProxy"));
        ((ObjectNode) config.get("serviceProfiles").get("_default")).put("basePath", "https://yet.another.petstore/another/path");
        variable("updatedAPIProxy", mapper.writeValueAsString(config));
        // Update the API-Proxy
        $(http().client(apiManager).send().put("/proxies/${apiId}").message().header("Content-Type", "application/json")
                .body("${updatedAPIProxy}"));
        $(http().client(apiManager).receive().response(HttpStatus.OK));
        $(echo("####### Export the API from the API-Manager using useFEAPIDefinition #######"));
        variable("expectedReturnCode", "0");
        variable("useFEAPIDefinition", "true"); // In this case we simulate to export the FE-API-Definition instead of the backend
        swaggerExport.doExecute(context);

        String exportedAPIConfigFile = context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/api-config.json";
        $(echo("####### Reading exported API-Config file: '" + exportedAPIConfigFile + "' #######"));
        JsonNode exportedAPIConfig = mapper.readTree(Files.newInputStream(new File(exportedAPIConfigFile).toPath()));
        assertEquals(exportedAPIConfig.get("version").asText(), "2.0.0");
        assertEquals(exportedAPIConfig.get("organization").asText(), "API Development " + context.getVariable("orgNumber"));
        assertEquals(exportedAPIConfig.get("state").asText(), "unpublished");
        assertEquals(exportedAPIConfig.get("path").asText(), context.getVariable("apiPath"));
        assertEquals(exportedAPIConfig.get("name").asText(), context.getVariable("apiName"));
        assertEquals(exportedAPIConfig.get("backendBasepath").asText(), "https://yet.another.petstore/another/path");
        assertEquals(exportedAPIConfig.get("caCerts").size(), 3);
        assertEquals(exportedAPIConfig.get("caCerts").get(0).get("certFile").asText(), "swagger.io.crt");
        assertFalse(exportedAPIConfig.get("caCerts").get(0).get("inbound").asBoolean());
        assertTrue(exportedAPIConfig.get("caCerts").get(0).get("outbound").asBoolean());
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/swagger.io.crt").exists(), "Certificate swagger.io.crt is missing");
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/AmazonRSA2048M02.crt").exists(), "Certificate StarfieldServicesRootCertificateAuthority-G2.crt is missing");
        assertTrue(new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/AmazonRootCA1.crt").exists(), "Certificate AmazonRootCA1.crt is missing");
        //assertTrue(new File(context.getVariable("exportLocation")+"/"+context.getVariable("exportFolder")+"/Amazon.crt").exists(), "Certificate Amazon.crt is missing");

        File exportedAPISpecFile = new File(context.getVariable("exportLocation") + "/" + context.getVariable("exportFolder") + "/" + context.getVariable("exportAPIName"));
        assertTrue(exportedAPISpecFile.exists(), "Exported API-Specification is missing");
        // Read the export Swagger-File
        JsonNode exportedAPISpec = mapper.readTree(Files.newInputStream(exportedAPISpecFile.toPath()));
        // Check the original basePath is set (See issue https://github.com/Axway-API-Management-Plus/apim-cli/issues/158)
        assertEquals(exportedAPISpec.get("basePath").asText(), "/v2");
        assertEquals(exportedAPISpec.get("host").asText(), "petstore.swagger.io");
        assertEquals(exportedAPISpec.get("schemes").get(0).asText(), "https");
    }
}
