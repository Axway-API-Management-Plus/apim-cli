package com.axway.apim.export.test.basic;

import static org.testng.Assert.assertEquals;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.axway.apim.export.test.ExportTestAction;
import com.axway.apim.test.ImportTestAction;
import com.consol.citrus.annotations.CitrusResource;
import com.consol.citrus.annotations.CitrusTest;
import com.consol.citrus.context.TestContext;
import com.consol.citrus.dsl.testng.TestNGCitrusTestRunner;
import com.consol.citrus.functions.core.RandomNumberFunction;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

@Test
public class DifferentVHostExportTestIT extends TestNGCitrusTestRunner {

	private ExportTestAction swaggerExport;
	private ImportTestAction swaggerImport;
	
	@CitrusTest
	@Test @Parameters("context")
	public void run(@Optional @CitrusResource TestContext context) throws IOException {		
		ObjectMapper mapper = new ObjectMapper();

		swaggerExport = new ExportTestAction();
		swaggerImport = new ImportTestAction();
		description("Import two APIs each with a different V-Host and export it afterwards");

		variable("apiNumber", RandomNumberFunction.getRandomNumber(3, true));
		variable("apiPath", "/api/test/"+this.getClass().getSimpleName()+"-${apiNumber}");
		variable("apiName", this.getClass().getSimpleName()+"-${apiNumber}");
		variable("state", "published");
		variable("exportLocation", "citrus:systemProperty('java.io.tmpdir')");
		variable(ExportTestAction.EXPORT_API,  "${apiPath}");
		
		// These are the folder and filenames generated by the export tool 
		variable("exportFolder", "api-test-${apiName}");
		variable("exportAPIName", "${apiName}.json");

		echo("####### Importing both APIs, which should exported in the second step #######");
		createVariable(ImportTestAction.API_DEFINITION,  "/test/export/files/basic/petstore.json");
		createVariable(ImportTestAction.API_CONFIG,  "/test/export/files/basic/flex-vhost-config.json");
		createVariable("vhost", "vhost1.customer.com");
		createVariable("version", "1.0.0");
		createVariable("expectedReturnCode", "0");
		swaggerImport.doExecute(context);
		createVariable("enforce", "true");
		createVariable("vhost", "vhost2.customer.com");
		createVariable("version", "2.0.0");
		swaggerImport.doExecute(context);

		echo("####### Export the API with vhost1.customer.com from the API-Manager #######");
		createVariable("expectedReturnCode", "0");
		createVariable("vhostToExport", "vhost1.customer.com");
		swaggerExport.doExecute(context);
		
		String exportedAPIConfigFile = context.getVariable("exportLocation")+"/vhost1.customer.com/"+context.getVariable("exportFolder")+"/api-config.json";
		
		echo("####### Reading exported API-Config file: '"+exportedAPIConfigFile+"' #######");
		JsonNode exportedAPIConfig = mapper.readTree(new FileInputStream(new File(exportedAPIConfigFile)));
		
		assertEquals(exportedAPIConfig.get("version").asText(), 		"1.0.0");
		assertEquals(exportedAPIConfig.get("vhost").asText(), 			"vhost1.customer.com");

		
		echo("####### Export the API with vhost2.customer.com from the API-Manager #######");
		createVariable("expectedReturnCode", "0");
		createVariable("vhostToExport", "vhost2.customer.com");
		swaggerExport.doExecute(context);
		
		exportedAPIConfigFile = context.getVariable("exportLocation")+"/vhost2.customer.com/"+context.getVariable("exportFolder")+"/api-config.json";
		
		echo("####### Reading exported API-Config file: '"+exportedAPIConfigFile+"' #######");
		exportedAPIConfig = mapper.readTree(new FileInputStream(new File(exportedAPIConfigFile)));
		
		assertEquals(exportedAPIConfig.get("version").asText(), 		"2.0.0");
		assertEquals(exportedAPIConfig.get("vhost").asText(), 			"vhost2.customer.com");
	}
}
