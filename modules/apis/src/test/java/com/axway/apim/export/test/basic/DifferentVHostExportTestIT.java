package com.axway.apim.export.test.basic;

import com.axway.apim.EndpointConfig;
import com.axway.apim.export.test.ExportTestAction;
import com.axway.apim.test.ImportTestAction;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.citrusframework.annotations.CitrusResource;
import org.citrusframework.annotations.CitrusTest;
import org.citrusframework.context.TestContext;
import org.citrusframework.functions.core.RandomNumberFunction;
import org.citrusframework.testng.spring.TestNGCitrusSpringSupport;
import org.springframework.test.context.ContextConfiguration;
import org.testng.annotations.Optional;
import org.testng.annotations.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

import static org.citrusframework.DefaultTestActionBuilder.action;
import static org.citrusframework.actions.EchoAction.Builder.echo;
import static org.testng.Assert.assertEquals;


@ContextConfiguration(classes = {EndpointConfig.class})
public class DifferentVHostExportTestIT extends TestNGCitrusSpringSupport {


	@CitrusTest
	@Test
	public void run(@Optional @CitrusResource TestContext context) throws IOException {
		ObjectMapper mapper = new ObjectMapper();

        ExportTestAction swaggerExport = new ExportTestAction();
        ImportTestAction swaggerImport = new ImportTestAction();
		description("Import two APIs each with a different V-Host and export it afterwards");

		variable("apiNumber", RandomNumberFunction.getRandomNumber(3, true));
		variable("apiPath", "/api/test/"+this.getClass().getSimpleName()+"-${apiNumber}");
		variable("apiName", this.getClass().getSimpleName()+"-${apiNumber}");
		variable("state", "published");
		variable("exportLocation", "citrus:systemProperty('java.io.tmpdir')");
		variable(ExportTestAction.EXPORT_API,  "${apiPath}");

		// These are the folder and filenames generated by the export tool
		variable("exportFolder", "api-test-${apiName}");
		variable("exportAPIName", "${apiName}.json");

		$(echo("####### Importing both APIs, which should exported in the second step #######"));
        variable(ImportTestAction.API_DEFINITION,  "/test/export/files/basic/petstore.json");
        variable(ImportTestAction.API_CONFIG,  "/test/export/files/basic/flex-vhost-config.json");
        variable("vhost", "vhost1.customer.com");
        variable("version", "1.0.0");
        variable("expectedReturnCode", "0");
		$(action(swaggerImport));
        variable("enforce", "true");
        variable("vhost", "vhost2.customer.com");
        variable("version", "2.0.0");
        $(action(swaggerImport));

		$(echo("####### Export the API with vhost1.customer.com from the API-Manager #######"));
        variable("expectedReturnCode", "0");
        variable("vhostToExport", "vhost1.customer.com");
        $(action(swaggerExport));

		String exportedAPIConfigFile = context.getVariable("exportLocation")+"/vhost1.customer.com/"+context.getVariable("exportFolder")+"/api-config.json";

		$(echo("####### Reading exported API-Config file: '"+exportedAPIConfigFile+"' #######"));
		JsonNode exportedAPIConfig = mapper.readTree(Files.newInputStream(new File(exportedAPIConfigFile).toPath()));

		assertEquals(exportedAPIConfig.get("version").asText(), 		"1.0.0");
		assertEquals(exportedAPIConfig.get("vhost").asText(), 			"vhost1.customer.com");
        $(echo("####### Export the API with vhost2.customer.com from the API-Manager #######"));
        variable("expectedReturnCode", "0");
        variable("vhostToExport", "vhost2.customer.com");
		swaggerExport.doExecute(context);
		exportedAPIConfigFile = context.getVariable("exportLocation")+"/vhost2.customer.com/"+context.getVariable("exportFolder")+"/api-config.json";

        $(echo("####### Reading exported API-Config file: '"+exportedAPIConfigFile+"' #######"));
		exportedAPIConfig = mapper.readTree(Files.newInputStream(new File(exportedAPIConfigFile).toPath()));
		assertEquals(exportedAPIConfig.get("version").asText(), 		"2.0.0");
		assertEquals(exportedAPIConfig.get("vhost").asText(), 			"vhost2.customer.com");
	}
}
