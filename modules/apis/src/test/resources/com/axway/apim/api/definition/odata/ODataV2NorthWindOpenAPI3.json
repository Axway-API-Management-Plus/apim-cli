{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OData Service",
    "description" : "The OData Service from northwind-odata-v2.xml$metadata",
    "version" : "1.0"
  },
  "servers" : [ {
    "url" : "https://myhost.customer.com:8767/api/v1/myAPI/"
  } ],
  "paths" : {
    "/Categories*" : {
      "get" : {
        "tags" : [ "Categories" ],
        "summary" : "Get Categories",
        "description" : "Returns the entity: Categories. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Categories supports the following navigational properties: [Products]<br />For example: .../Categories(Entity-Id)/<b>Products</b>/.....",
        "operationId" : "getCategories",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Products"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Categories",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Categories({Id})*" : {
      "get" : {
        "tags" : [ "Categories" ],
        "summary" : "Get Categories on Id",
        "description" : "Returns the entity: Categories. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Categories supports the following navigational properties: [Products]<br />For example: .../Categories(Entity-Id)/<b>Products</b>/.....",
        "operationId" : "getCategoriesId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Products"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Categories",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Category"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Categories" ],
        "summary" : "Create a new entity Categories",
        "description" : "Create a new entity in EntitySet: Categories",
        "operationId" : "createCategories",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Category"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Categories",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Categories" ],
        "summary" : "Delete Categories",
        "description" : "Delete entity in EntitySet Categories",
        "operationId" : "deleteCategories",
        "responses" : {
          "204" : {
            "description" : "EntitySet Categories successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Categories" ],
        "summary" : "Update entity Categories",
        "description" : "Update an existing entity in EntitySet: Categories",
        "operationId" : "updateCategories",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Category"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Categories",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: CategoryID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/CustomerDemographics*" : {
      "get" : {
        "tags" : [ "CustomerDemographics" ],
        "summary" : "Get CustomerDemographics",
        "description" : "Returns the entity: CustomerDemographics. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: CustomerDemographics supports the following navigational properties: [Customers]<br />For example: .../CustomerDemographics(Entity-Id)/<b>Customers</b>/.....",
        "operationId" : "getCustomerDemographics",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Customers"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CustomerTypeID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CustomerTypeID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet CustomerDemographics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CustomerDemographic"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/CustomerDemographics({Id})*" : {
      "get" : {
        "tags" : [ "CustomerDemographics" ],
        "summary" : "Get CustomerDemographics on Id",
        "description" : "Returns the entity: CustomerDemographics. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: CustomerDemographics supports the following navigational properties: [Customers]<br />For example: .../CustomerDemographics(Entity-Id)/<b>Customers</b>/.....",
        "operationId" : "getCustomerDemographicsId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Customers"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CustomerTypeID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet CustomerDemographics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerDemographic"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CustomerDemographics" ],
        "summary" : "Create a new entity CustomerDemographics",
        "description" : "Create a new entity in EntitySet: CustomerDemographics",
        "operationId" : "createCustomerDemographics",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDemographic"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet CustomerDemographics",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "CustomerDemographics" ],
        "summary" : "Delete CustomerDemographics",
        "description" : "Delete entity in EntitySet CustomerDemographics",
        "operationId" : "deleteCustomerDemographics",
        "responses" : {
          "204" : {
            "description" : "EntitySet CustomerDemographics successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "CustomerDemographics" ],
        "summary" : "Update entity CustomerDemographics",
        "description" : "Update an existing entity in EntitySet: CustomerDemographics",
        "operationId" : "updateCustomerDemographics",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerDemographic"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet CustomerDemographics",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: CustomerTypeID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Customers*" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get Customers",
        "description" : "Returns the entity: Customers. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Customers supports the following navigational properties: [Orders, CustomerDemographics]<br />For example: .../Customers(Entity-Id)/<b>Orders</b>/.....",
        "operationId" : "getCustomers",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Orders"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CustomerID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CustomerID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Customers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Customers({Id})*" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get Customers on Id",
        "description" : "Returns the entity: Customers. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Customers supports the following navigational properties: [Orders, CustomerDemographics]<br />For example: .../Customers(Entity-Id)/<b>Orders</b>/.....",
        "operationId" : "getCustomersId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Orders"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CustomerID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Customers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customers" ],
        "summary" : "Create a new entity Customers",
        "description" : "Create a new entity in EntitySet: Customers",
        "operationId" : "createCustomers",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Customers",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Customers" ],
        "summary" : "Delete Customers",
        "description" : "Delete entity in EntitySet Customers",
        "operationId" : "deleteCustomers",
        "responses" : {
          "204" : {
            "description" : "EntitySet Customers successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Customers" ],
        "summary" : "Update entity Customers",
        "description" : "Update an existing entity in EntitySet: Customers",
        "operationId" : "updateCustomers",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Customers",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: CustomerID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Employees*" : {
      "get" : {
        "tags" : [ "Employees" ],
        "summary" : "Get Employees",
        "description" : "Returns the entity: Employees. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Employees supports the following navigational properties: [Employees1, Employee1, Orders, Territories]<br />For example: .../Employees(Entity-Id)/<b>Employees1</b>/.....",
        "operationId" : "getEmployees",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Employees1"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "EmployeeID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "EmployeeID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Employees",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Employee"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Employees({Id})*" : {
      "get" : {
        "tags" : [ "Employees" ],
        "summary" : "Get Employees on Id",
        "description" : "Returns the entity: Employees. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Employees supports the following navigational properties: [Employees1, Employee1, Orders, Territories]<br />For example: .../Employees(Entity-Id)/<b>Employees1</b>/.....",
        "operationId" : "getEmployeesId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Employees1"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "EmployeeID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Employees",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Employee"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Employees" ],
        "summary" : "Create a new entity Employees",
        "description" : "Create a new entity in EntitySet: Employees",
        "operationId" : "createEmployees",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Employee"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Employees",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Employees" ],
        "summary" : "Delete Employees",
        "description" : "Delete entity in EntitySet Employees",
        "operationId" : "deleteEmployees",
        "responses" : {
          "204" : {
            "description" : "EntitySet Employees successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Employees" ],
        "summary" : "Update entity Employees",
        "description" : "Update an existing entity in EntitySet: Employees",
        "operationId" : "updateEmployees",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Employee"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Employees",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: EmployeeID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Order_Details*" : {
      "get" : {
        "tags" : [ "Order_Details" ],
        "summary" : "Get Order_Details",
        "description" : "Returns the entity: Order_Details. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Order_Details supports the following navigational properties: [Order, Product]<br />For example: .../Order_Details(Entity-Id)/<b>Order</b>/.....",
        "operationId" : "getOrder_Details",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Order"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Order_Details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Order_Detail"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Order_Details({Id})*" : {
      "get" : {
        "tags" : [ "Order_Details" ],
        "summary" : "Get Order_Details on Id",
        "description" : "Returns the entity: Order_Details. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Order_Details supports the following navigational properties: [Order, Product]<br />For example: .../Order_Details(Entity-Id)/<b>Order</b>/.....",
        "operationId" : "getOrder_DetailsId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Order"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Order_Details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order_Detail"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Order_Details" ],
        "summary" : "Create a new entity Order_Details",
        "description" : "Create a new entity in EntitySet: Order_Details",
        "operationId" : "createOrder_Details",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order_Detail"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Order_Details",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Order_Details" ],
        "summary" : "Delete Order_Details",
        "description" : "Delete entity in EntitySet Order_Details",
        "operationId" : "deleteOrder_Details",
        "responses" : {
          "204" : {
            "description" : "EntitySet Order_Details successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Order_Details" ],
        "summary" : "Update entity Order_Details",
        "description" : "Update an existing entity in EntitySet: Order_Details",
        "operationId" : "updateOrder_Details",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order_Detail"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Order_Details",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: OrderID, ProductID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Orders*" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Get Orders",
        "description" : "Returns the entity: Orders. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Orders supports the following navigational properties: [Customer, Employee, Order_Details, Shipper]<br />For example: .../Orders(Entity-Id)/<b>Customer</b>/.....",
        "operationId" : "getOrders",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Customer"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Orders",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Orders({Id})*" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Get Orders on Id",
        "description" : "Returns the entity: Orders. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Orders supports the following navigational properties: [Customer, Employee, Order_Details, Shipper]<br />For example: .../Orders(Entity-Id)/<b>Customer</b>/.....",
        "operationId" : "getOrdersId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Customer"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Orders",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Create a new entity Orders",
        "description" : "Create a new entity in EntitySet: Orders",
        "operationId" : "createOrders",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Orders",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Orders" ],
        "summary" : "Delete Orders",
        "description" : "Delete entity in EntitySet Orders",
        "operationId" : "deleteOrders",
        "responses" : {
          "204" : {
            "description" : "EntitySet Orders successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Orders" ],
        "summary" : "Update entity Orders",
        "description" : "Update an existing entity in EntitySet: Orders",
        "operationId" : "updateOrders",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Orders",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: OrderID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Products*" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "Get Products",
        "description" : "Returns the entity: Products. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Products supports the following navigational properties: [Category, Order_Details, Supplier]<br />For example: .../Products(Entity-Id)/<b>Category</b>/.....",
        "operationId" : "getProducts",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Category"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Products",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Products({Id})*" : {
      "get" : {
        "tags" : [ "Products" ],
        "summary" : "Get Products on Id",
        "description" : "Returns the entity: Products. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Products supports the following navigational properties: [Category, Order_Details, Supplier]<br />For example: .../Products(Entity-Id)/<b>Category</b>/.....",
        "operationId" : "getProductsId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Category"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Products",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Products" ],
        "summary" : "Create a new entity Products",
        "description" : "Create a new entity in EntitySet: Products",
        "operationId" : "createProducts",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Products",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Products" ],
        "summary" : "Delete Products",
        "description" : "Delete entity in EntitySet Products",
        "operationId" : "deleteProducts",
        "responses" : {
          "204" : {
            "description" : "EntitySet Products successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Products" ],
        "summary" : "Update entity Products",
        "description" : "Update an existing entity in EntitySet: Products",
        "operationId" : "updateProducts",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Products",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: ProductID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Regions*" : {
      "get" : {
        "tags" : [ "Regions" ],
        "summary" : "Get Regions",
        "description" : "Returns the entity: Regions. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Regions supports the following navigational properties: [Territories]<br />For example: .../Regions(Entity-Id)/<b>Territories</b>/.....",
        "operationId" : "getRegions",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Territories"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "RegionID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "RegionID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Regions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Region"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Regions({Id})*" : {
      "get" : {
        "tags" : [ "Regions" ],
        "summary" : "Get Regions on Id",
        "description" : "Returns the entity: Regions. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Regions supports the following navigational properties: [Territories]<br />For example: .../Regions(Entity-Id)/<b>Territories</b>/.....",
        "operationId" : "getRegionsId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Territories"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "RegionID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Regions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Region"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Regions" ],
        "summary" : "Create a new entity Regions",
        "description" : "Create a new entity in EntitySet: Regions",
        "operationId" : "createRegions",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Region"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Regions",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Regions" ],
        "summary" : "Delete Regions",
        "description" : "Delete entity in EntitySet Regions",
        "operationId" : "deleteRegions",
        "responses" : {
          "204" : {
            "description" : "EntitySet Regions successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Regions" ],
        "summary" : "Update entity Regions",
        "description" : "Update an existing entity in EntitySet: Regions",
        "operationId" : "updateRegions",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Region"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Regions",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: RegionID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Shippers*" : {
      "get" : {
        "tags" : [ "Shippers" ],
        "summary" : "Get Shippers",
        "description" : "Returns the entity: Shippers. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Shippers supports the following navigational properties: [Orders]<br />For example: .../Shippers(Entity-Id)/<b>Orders</b>/.....",
        "operationId" : "getShippers",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Orders"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShipperID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShipperID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Shippers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Shipper"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Shippers({Id})*" : {
      "get" : {
        "tags" : [ "Shippers" ],
        "summary" : "Get Shippers on Id",
        "description" : "Returns the entity: Shippers. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Shippers supports the following navigational properties: [Orders]<br />For example: .../Shippers(Entity-Id)/<b>Orders</b>/.....",
        "operationId" : "getShippersId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Orders"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShipperID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Shippers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Shipper"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Shippers" ],
        "summary" : "Create a new entity Shippers",
        "description" : "Create a new entity in EntitySet: Shippers",
        "operationId" : "createShippers",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Shipper"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Shippers",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Shippers" ],
        "summary" : "Delete Shippers",
        "description" : "Delete entity in EntitySet Shippers",
        "operationId" : "deleteShippers",
        "responses" : {
          "204" : {
            "description" : "EntitySet Shippers successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Shippers" ],
        "summary" : "Update entity Shippers",
        "description" : "Update an existing entity in EntitySet: Shippers",
        "operationId" : "updateShippers",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Shipper"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Shippers",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: ShipperID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Suppliers*" : {
      "get" : {
        "tags" : [ "Suppliers" ],
        "summary" : "Get Suppliers",
        "description" : "Returns the entity: Suppliers. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Suppliers supports the following navigational properties: [Products]<br />For example: .../Suppliers(Entity-Id)/<b>Products</b>/.....",
        "operationId" : "getSuppliers",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Products"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "SupplierID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "SupplierID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Suppliers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Supplier"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Suppliers({Id})*" : {
      "get" : {
        "tags" : [ "Suppliers" ],
        "summary" : "Get Suppliers on Id",
        "description" : "Returns the entity: Suppliers. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Suppliers supports the following navigational properties: [Products]<br />For example: .../Suppliers(Entity-Id)/<b>Products</b>/.....",
        "operationId" : "getSuppliersId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Products"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "SupplierID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Suppliers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Supplier"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Suppliers" ],
        "summary" : "Create a new entity Suppliers",
        "description" : "Create a new entity in EntitySet: Suppliers",
        "operationId" : "createSuppliers",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Supplier"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Suppliers",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Suppliers" ],
        "summary" : "Delete Suppliers",
        "description" : "Delete entity in EntitySet Suppliers",
        "operationId" : "deleteSuppliers",
        "responses" : {
          "204" : {
            "description" : "EntitySet Suppliers successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Suppliers" ],
        "summary" : "Update entity Suppliers",
        "description" : "Update an existing entity in EntitySet: Suppliers",
        "operationId" : "updateSuppliers",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Supplier"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Suppliers",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: SupplierID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Territories*" : {
      "get" : {
        "tags" : [ "Territories" ],
        "summary" : "Get Territories",
        "description" : "Returns the entity: Territories. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Territories supports the following navigational properties: [Region, Employees]<br />For example: .../Territories(Entity-Id)/<b>Region</b>/.....",
        "operationId" : "getTerritories",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Region"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "TerritoryID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "TerritoryID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Territories",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Territory"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Territories({Id})*" : {
      "get" : {
        "tags" : [ "Territories" ],
        "summary" : "Get Territories on Id",
        "description" : "Returns the entity: Territories. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br /><br />The entity: Territories supports the following navigational properties: [Region, Employees]<br />For example: .../Territories(Entity-Id)/<b>Region</b>/.....",
        "operationId" : "getTerritoriesId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          },
          "example" : "Region"
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "TerritoryID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Territories",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Territory"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Territories" ],
        "summary" : "Create a new entity Territories",
        "description" : "Create a new entity in EntitySet: Territories",
        "operationId" : "createTerritories",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Territory"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Territories",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Territories" ],
        "summary" : "Delete Territories",
        "description" : "Delete entity in EntitySet Territories",
        "operationId" : "deleteTerritories",
        "responses" : {
          "204" : {
            "description" : "EntitySet Territories successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Territories" ],
        "summary" : "Update entity Territories",
        "description" : "Update an existing entity in EntitySet: Territories",
        "operationId" : "updateTerritories",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Territory"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Territories",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: TerritoryID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Alphabetical_list_of_products*" : {
      "get" : {
        "tags" : [ "Alphabetical_list_of_products" ],
        "summary" : "Get Alphabetical_list_of_products",
        "description" : "Returns the entity: Alphabetical_list_of_products. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Alphabetical_list_of_products supports <b>no</b> navigational properties.",
        "operationId" : "getAlphabetical_list_of_products",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Alphabetical_list_of_products",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Alphabetical_list_of_product"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Alphabetical_list_of_products({Id})*" : {
      "get" : {
        "tags" : [ "Alphabetical_list_of_products" ],
        "summary" : "Get Alphabetical_list_of_products on Id",
        "description" : "Returns the entity: Alphabetical_list_of_products. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Alphabetical_list_of_products supports <b>no</b> navigational properties.",
        "operationId" : "getAlphabetical_list_of_productsId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Alphabetical_list_of_products",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Alphabetical_list_of_product"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Alphabetical_list_of_products" ],
        "summary" : "Create a new entity Alphabetical_list_of_products",
        "description" : "Create a new entity in EntitySet: Alphabetical_list_of_products",
        "operationId" : "createAlphabetical_list_of_products",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Alphabetical_list_of_product"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Alphabetical_list_of_products",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Alphabetical_list_of_products" ],
        "summary" : "Delete Alphabetical_list_of_products",
        "description" : "Delete entity in EntitySet Alphabetical_list_of_products",
        "operationId" : "deleteAlphabetical_list_of_products",
        "responses" : {
          "204" : {
            "description" : "EntitySet Alphabetical_list_of_products successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Alphabetical_list_of_products" ],
        "summary" : "Update entity Alphabetical_list_of_products",
        "description" : "Update an existing entity in EntitySet: Alphabetical_list_of_products",
        "operationId" : "updateAlphabetical_list_of_products",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Alphabetical_list_of_product"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Alphabetical_list_of_products",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: ProductID, ProductName, Discontinued, CategoryName",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Category_Sales_for_1997*" : {
      "get" : {
        "tags" : [ "Category_Sales_for_1997" ],
        "summary" : "Get Category_Sales_for_1997",
        "description" : "Returns the entity: Category_Sales_for_1997. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Category_Sales_for_1997 supports <b>no</b> navigational properties.",
        "operationId" : "getCategory_Sales_for_1997",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryName"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryName"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Category_Sales_for_1997",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Category_Sales_for_1997"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Category_Sales_for_1997({Id})*" : {
      "get" : {
        "tags" : [ "Category_Sales_for_1997" ],
        "summary" : "Get Category_Sales_for_1997 on Id",
        "description" : "Returns the entity: Category_Sales_for_1997. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Category_Sales_for_1997 supports <b>no</b> navigational properties.",
        "operationId" : "getCategory_Sales_for_1997Id",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryName"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Category_Sales_for_1997",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Category_Sales_for_1997"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Category_Sales_for_1997" ],
        "summary" : "Create a new entity Category_Sales_for_1997",
        "description" : "Create a new entity in EntitySet: Category_Sales_for_1997",
        "operationId" : "createCategory_Sales_for_1997",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Category_Sales_for_1997"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Category_Sales_for_1997",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Category_Sales_for_1997" ],
        "summary" : "Delete Category_Sales_for_1997",
        "description" : "Delete entity in EntitySet Category_Sales_for_1997",
        "operationId" : "deleteCategory_Sales_for_1997",
        "responses" : {
          "204" : {
            "description" : "EntitySet Category_Sales_for_1997 successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Category_Sales_for_1997" ],
        "summary" : "Update entity Category_Sales_for_1997",
        "description" : "Update an existing entity in EntitySet: Category_Sales_for_1997",
        "operationId" : "updateCategory_Sales_for_1997",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Category_Sales_for_1997"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Category_Sales_for_1997",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: CategoryName",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Current_Product_Lists*" : {
      "get" : {
        "tags" : [ "Current_Product_Lists" ],
        "summary" : "Get Current_Product_Lists",
        "description" : "Returns the entity: Current_Product_Lists. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Current_Product_Lists supports <b>no</b> navigational properties.",
        "operationId" : "getCurrent_Product_Lists",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Current_Product_Lists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Current_Product_List"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Current_Product_Lists({Id})*" : {
      "get" : {
        "tags" : [ "Current_Product_Lists" ],
        "summary" : "Get Current_Product_Lists on Id",
        "description" : "Returns the entity: Current_Product_Lists. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Current_Product_Lists supports <b>no</b> navigational properties.",
        "operationId" : "getCurrent_Product_ListsId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Current_Product_Lists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Current_Product_List"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Current_Product_Lists" ],
        "summary" : "Create a new entity Current_Product_Lists",
        "description" : "Create a new entity in EntitySet: Current_Product_Lists",
        "operationId" : "createCurrent_Product_Lists",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Current_Product_List"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Current_Product_Lists",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Current_Product_Lists" ],
        "summary" : "Delete Current_Product_Lists",
        "description" : "Delete entity in EntitySet Current_Product_Lists",
        "operationId" : "deleteCurrent_Product_Lists",
        "responses" : {
          "204" : {
            "description" : "EntitySet Current_Product_Lists successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Current_Product_Lists" ],
        "summary" : "Update entity Current_Product_Lists",
        "description" : "Update an existing entity in EntitySet: Current_Product_Lists",
        "operationId" : "updateCurrent_Product_Lists",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Current_Product_List"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Current_Product_Lists",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: ProductID, ProductName",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Customer_and_Suppliers_by_Cities*" : {
      "get" : {
        "tags" : [ "Customer_and_Suppliers_by_Cities" ],
        "summary" : "Get Customer_and_Suppliers_by_Cities",
        "description" : "Returns the entity: Customer_and_Suppliers_by_Cities. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Customer_and_Suppliers_by_Cities supports <b>no</b> navigational properties.",
        "operationId" : "getCustomer_and_Suppliers_by_Cities",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "City"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "City"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Customer_and_Suppliers_by_Cities",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Customer_and_Suppliers_by_City"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Customer_and_Suppliers_by_Cities({Id})*" : {
      "get" : {
        "tags" : [ "Customer_and_Suppliers_by_Cities" ],
        "summary" : "Get Customer_and_Suppliers_by_Cities on Id",
        "description" : "Returns the entity: Customer_and_Suppliers_by_Cities. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Customer_and_Suppliers_by_Cities supports <b>no</b> navigational properties.",
        "operationId" : "getCustomer_and_Suppliers_by_CitiesId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "City"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Customer_and_Suppliers_by_Cities",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer_and_Suppliers_by_City"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer_and_Suppliers_by_Cities" ],
        "summary" : "Create a new entity Customer_and_Suppliers_by_Cities",
        "description" : "Create a new entity in EntitySet: Customer_and_Suppliers_by_Cities",
        "operationId" : "createCustomer_and_Suppliers_by_Cities",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer_and_Suppliers_by_City"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Customer_and_Suppliers_by_Cities",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer_and_Suppliers_by_Cities" ],
        "summary" : "Delete Customer_and_Suppliers_by_Cities",
        "description" : "Delete entity in EntitySet Customer_and_Suppliers_by_Cities",
        "operationId" : "deleteCustomer_and_Suppliers_by_Cities",
        "responses" : {
          "204" : {
            "description" : "EntitySet Customer_and_Suppliers_by_Cities successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Customer_and_Suppliers_by_Cities" ],
        "summary" : "Update entity Customer_and_Suppliers_by_Cities",
        "description" : "Update an existing entity in EntitySet: Customer_and_Suppliers_by_Cities",
        "operationId" : "updateCustomer_and_Suppliers_by_Cities",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer_and_Suppliers_by_City"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Customer_and_Suppliers_by_Cities",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: CompanyName, Relationship",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Invoices*" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Get Invoices",
        "description" : "Returns the entity: Invoices. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Invoices supports <b>no</b> navigational properties.",
        "operationId" : "getInvoices",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShipName"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShipName"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Invoices",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Invoice"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Invoices({Id})*" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Get Invoices on Id",
        "description" : "Returns the entity: Invoices. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Invoices supports <b>no</b> navigational properties.",
        "operationId" : "getInvoicesId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShipName"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Invoices",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Create a new entity Invoices",
        "description" : "Create a new entity in EntitySet: Invoices",
        "operationId" : "createInvoices",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Invoice"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Invoices",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Invoices" ],
        "summary" : "Delete Invoices",
        "description" : "Delete entity in EntitySet Invoices",
        "operationId" : "deleteInvoices",
        "responses" : {
          "204" : {
            "description" : "EntitySet Invoices successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Invoices" ],
        "summary" : "Update entity Invoices",
        "description" : "Update an existing entity in EntitySet: Invoices",
        "operationId" : "updateInvoices",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Invoice"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Invoices",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: CustomerName, Salesperson, OrderID, ShipperName, ProductID, ProductName, UnitPrice, Quantity, Discount",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Order_Details_Extendeds*" : {
      "get" : {
        "tags" : [ "Order_Details_Extendeds" ],
        "summary" : "Get Order_Details_Extendeds",
        "description" : "Returns the entity: Order_Details_Extendeds. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Order_Details_Extendeds supports <b>no</b> navigational properties.",
        "operationId" : "getOrder_Details_Extendeds",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Order_Details_Extendeds",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Order_Details_Extended"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Order_Details_Extendeds({Id})*" : {
      "get" : {
        "tags" : [ "Order_Details_Extendeds" ],
        "summary" : "Get Order_Details_Extendeds on Id",
        "description" : "Returns the entity: Order_Details_Extendeds. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Order_Details_Extendeds supports <b>no</b> navigational properties.",
        "operationId" : "getOrder_Details_ExtendedsId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Order_Details_Extendeds",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order_Details_Extended"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Order_Details_Extendeds" ],
        "summary" : "Create a new entity Order_Details_Extendeds",
        "description" : "Create a new entity in EntitySet: Order_Details_Extendeds",
        "operationId" : "createOrder_Details_Extendeds",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order_Details_Extended"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Order_Details_Extendeds",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Order_Details_Extendeds" ],
        "summary" : "Delete Order_Details_Extendeds",
        "description" : "Delete entity in EntitySet Order_Details_Extendeds",
        "operationId" : "deleteOrder_Details_Extendeds",
        "responses" : {
          "204" : {
            "description" : "EntitySet Order_Details_Extendeds successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Order_Details_Extendeds" ],
        "summary" : "Update entity Order_Details_Extendeds",
        "description" : "Update an existing entity in EntitySet: Order_Details_Extendeds",
        "operationId" : "updateOrder_Details_Extendeds",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order_Details_Extended"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Order_Details_Extendeds",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: OrderID, ProductID, ProductName, UnitPrice, Quantity, Discount",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Order_Subtotals*" : {
      "get" : {
        "tags" : [ "Order_Subtotals" ],
        "summary" : "Get Order_Subtotals",
        "description" : "Returns the entity: Order_Subtotals. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Order_Subtotals supports <b>no</b> navigational properties.",
        "operationId" : "getOrder_Subtotals",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Order_Subtotals",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Order_Subtotal"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Order_Subtotals({Id})*" : {
      "get" : {
        "tags" : [ "Order_Subtotals" ],
        "summary" : "Get Order_Subtotals on Id",
        "description" : "Returns the entity: Order_Subtotals. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Order_Subtotals supports <b>no</b> navigational properties.",
        "operationId" : "getOrder_SubtotalsId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Order_Subtotals",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order_Subtotal"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Order_Subtotals" ],
        "summary" : "Create a new entity Order_Subtotals",
        "description" : "Create a new entity in EntitySet: Order_Subtotals",
        "operationId" : "createOrder_Subtotals",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order_Subtotal"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Order_Subtotals",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Order_Subtotals" ],
        "summary" : "Delete Order_Subtotals",
        "description" : "Delete entity in EntitySet Order_Subtotals",
        "operationId" : "deleteOrder_Subtotals",
        "responses" : {
          "204" : {
            "description" : "EntitySet Order_Subtotals successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Order_Subtotals" ],
        "summary" : "Update entity Order_Subtotals",
        "description" : "Update an existing entity in EntitySet: Order_Subtotals",
        "operationId" : "updateOrder_Subtotals",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order_Subtotal"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Order_Subtotals",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: OrderID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Orders_Qries*" : {
      "get" : {
        "tags" : [ "Orders_Qries" ],
        "summary" : "Get Orders_Qries",
        "description" : "Returns the entity: Orders_Qries. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Orders_Qries supports <b>no</b> navigational properties.",
        "operationId" : "getOrders_Qries",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Orders_Qries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Orders_Qry"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Orders_Qries({Id})*" : {
      "get" : {
        "tags" : [ "Orders_Qries" ],
        "summary" : "Get Orders_Qries on Id",
        "description" : "Returns the entity: Orders_Qries. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Orders_Qries supports <b>no</b> navigational properties.",
        "operationId" : "getOrders_QriesId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "OrderID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Orders_Qries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Orders_Qry"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Orders_Qries" ],
        "summary" : "Create a new entity Orders_Qries",
        "description" : "Create a new entity in EntitySet: Orders_Qries",
        "operationId" : "createOrders_Qries",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Orders_Qry"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Orders_Qries",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Orders_Qries" ],
        "summary" : "Delete Orders_Qries",
        "description" : "Delete entity in EntitySet Orders_Qries",
        "operationId" : "deleteOrders_Qries",
        "responses" : {
          "204" : {
            "description" : "EntitySet Orders_Qries successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Orders_Qries" ],
        "summary" : "Update entity Orders_Qries",
        "description" : "Update an existing entity in EntitySet: Orders_Qries",
        "operationId" : "updateOrders_Qries",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Orders_Qry"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Orders_Qries",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: OrderID, CompanyName",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Product_Sales_for_1997*" : {
      "get" : {
        "tags" : [ "Product_Sales_for_1997" ],
        "summary" : "Get Product_Sales_for_1997",
        "description" : "Returns the entity: Product_Sales_for_1997. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Product_Sales_for_1997 supports <b>no</b> navigational properties.",
        "operationId" : "getProduct_Sales_for_1997",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryName"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryName"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Product_Sales_for_1997",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Product_Sales_for_1997"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Product_Sales_for_1997({Id})*" : {
      "get" : {
        "tags" : [ "Product_Sales_for_1997" ],
        "summary" : "Get Product_Sales_for_1997 on Id",
        "description" : "Returns the entity: Product_Sales_for_1997. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Product_Sales_for_1997 supports <b>no</b> navigational properties.",
        "operationId" : "getProduct_Sales_for_1997Id",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryName"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Product_Sales_for_1997",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product_Sales_for_1997"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Product_Sales_for_1997" ],
        "summary" : "Create a new entity Product_Sales_for_1997",
        "description" : "Create a new entity in EntitySet: Product_Sales_for_1997",
        "operationId" : "createProduct_Sales_for_1997",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product_Sales_for_1997"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Product_Sales_for_1997",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Product_Sales_for_1997" ],
        "summary" : "Delete Product_Sales_for_1997",
        "description" : "Delete entity in EntitySet Product_Sales_for_1997",
        "operationId" : "deleteProduct_Sales_for_1997",
        "responses" : {
          "204" : {
            "description" : "EntitySet Product_Sales_for_1997 successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Product_Sales_for_1997" ],
        "summary" : "Update entity Product_Sales_for_1997",
        "description" : "Update an existing entity in EntitySet: Product_Sales_for_1997",
        "operationId" : "updateProduct_Sales_for_1997",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product_Sales_for_1997"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Product_Sales_for_1997",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: CategoryName, ProductName",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Products_Above_Average_Prices*" : {
      "get" : {
        "tags" : [ "Products_Above_Average_Prices" ],
        "summary" : "Get Products_Above_Average_Prices",
        "description" : "Returns the entity: Products_Above_Average_Prices. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Products_Above_Average_Prices supports <b>no</b> navigational properties.",
        "operationId" : "getProducts_Above_Average_Prices",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductName"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductName"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Products_Above_Average_Prices",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Products_Above_Average_Price"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Products_Above_Average_Prices({Id})*" : {
      "get" : {
        "tags" : [ "Products_Above_Average_Prices" ],
        "summary" : "Get Products_Above_Average_Prices on Id",
        "description" : "Returns the entity: Products_Above_Average_Prices. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Products_Above_Average_Prices supports <b>no</b> navigational properties.",
        "operationId" : "getProducts_Above_Average_PricesId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ProductName"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Products_Above_Average_Prices",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Products_Above_Average_Price"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Products_Above_Average_Prices" ],
        "summary" : "Create a new entity Products_Above_Average_Prices",
        "description" : "Create a new entity in EntitySet: Products_Above_Average_Prices",
        "operationId" : "createProducts_Above_Average_Prices",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Products_Above_Average_Price"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Products_Above_Average_Prices",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Products_Above_Average_Prices" ],
        "summary" : "Delete Products_Above_Average_Prices",
        "description" : "Delete entity in EntitySet Products_Above_Average_Prices",
        "operationId" : "deleteProducts_Above_Average_Prices",
        "responses" : {
          "204" : {
            "description" : "EntitySet Products_Above_Average_Prices successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Products_Above_Average_Prices" ],
        "summary" : "Update entity Products_Above_Average_Prices",
        "description" : "Update an existing entity in EntitySet: Products_Above_Average_Prices",
        "operationId" : "updateProducts_Above_Average_Prices",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Products_Above_Average_Price"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Products_Above_Average_Prices",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: ProductName",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Products_by_Categories*" : {
      "get" : {
        "tags" : [ "Products_by_Categories" ],
        "summary" : "Get Products_by_Categories",
        "description" : "Returns the entity: Products_by_Categories. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Products_by_Categories supports <b>no</b> navigational properties.",
        "operationId" : "getProducts_by_Categories",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryName"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryName"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Products_by_Categories",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Products_by_Category"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Products_by_Categories({Id})*" : {
      "get" : {
        "tags" : [ "Products_by_Categories" ],
        "summary" : "Get Products_by_Categories on Id",
        "description" : "Returns the entity: Products_by_Categories. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Products_by_Categories supports <b>no</b> navigational properties.",
        "operationId" : "getProducts_by_CategoriesId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryName"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Products_by_Categories",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Products_by_Category"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Products_by_Categories" ],
        "summary" : "Create a new entity Products_by_Categories",
        "description" : "Create a new entity in EntitySet: Products_by_Categories",
        "operationId" : "createProducts_by_Categories",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Products_by_Category"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Products_by_Categories",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Products_by_Categories" ],
        "summary" : "Delete Products_by_Categories",
        "description" : "Delete entity in EntitySet Products_by_Categories",
        "operationId" : "deleteProducts_by_Categories",
        "responses" : {
          "204" : {
            "description" : "EntitySet Products_by_Categories successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Products_by_Categories" ],
        "summary" : "Update entity Products_by_Categories",
        "description" : "Update an existing entity in EntitySet: Products_by_Categories",
        "operationId" : "updateProducts_by_Categories",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Products_by_Category"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Products_by_Categories",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: CategoryName, ProductName, Discontinued",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Sales_by_Categories*" : {
      "get" : {
        "tags" : [ "Sales_by_Categories" ],
        "summary" : "Get Sales_by_Categories",
        "description" : "Returns the entity: Sales_by_Categories. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Sales_by_Categories supports <b>no</b> navigational properties.",
        "operationId" : "getSales_by_Categories",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryID"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryID"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Sales_by_Categories",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Sales_by_Category"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Sales_by_Categories({Id})*" : {
      "get" : {
        "tags" : [ "Sales_by_Categories" ],
        "summary" : "Get Sales_by_Categories on Id",
        "description" : "Returns the entity: Sales_by_Categories. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Sales_by_Categories supports <b>no</b> navigational properties.",
        "operationId" : "getSales_by_CategoriesId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "CategoryID"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Sales_by_Categories",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sales_by_Category"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Sales_by_Categories" ],
        "summary" : "Create a new entity Sales_by_Categories",
        "description" : "Create a new entity in EntitySet: Sales_by_Categories",
        "operationId" : "createSales_by_Categories",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Sales_by_Category"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Sales_by_Categories",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Sales_by_Categories" ],
        "summary" : "Delete Sales_by_Categories",
        "description" : "Delete entity in EntitySet Sales_by_Categories",
        "operationId" : "deleteSales_by_Categories",
        "responses" : {
          "204" : {
            "description" : "EntitySet Sales_by_Categories successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Sales_by_Categories" ],
        "summary" : "Update entity Sales_by_Categories",
        "description" : "Update an existing entity in EntitySet: Sales_by_Categories",
        "operationId" : "updateSales_by_Categories",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Sales_by_Category"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Sales_by_Categories",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: CategoryID, CategoryName, ProductName",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Sales_Totals_by_Amounts*" : {
      "get" : {
        "tags" : [ "Sales_Totals_by_Amounts" ],
        "summary" : "Get Sales_Totals_by_Amounts",
        "description" : "Returns the entity: Sales_Totals_by_Amounts. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Sales_Totals_by_Amounts supports <b>no</b> navigational properties.",
        "operationId" : "getSales_Totals_by_Amounts",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "SaleAmount"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "SaleAmount"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Sales_Totals_by_Amounts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Sales_Totals_by_Amount"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Sales_Totals_by_Amounts({Id})*" : {
      "get" : {
        "tags" : [ "Sales_Totals_by_Amounts" ],
        "summary" : "Get Sales_Totals_by_Amounts on Id",
        "description" : "Returns the entity: Sales_Totals_by_Amounts. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Sales_Totals_by_Amounts supports <b>no</b> navigational properties.",
        "operationId" : "getSales_Totals_by_AmountsId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "SaleAmount"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Sales_Totals_by_Amounts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sales_Totals_by_Amount"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Sales_Totals_by_Amounts" ],
        "summary" : "Create a new entity Sales_Totals_by_Amounts",
        "description" : "Create a new entity in EntitySet: Sales_Totals_by_Amounts",
        "operationId" : "createSales_Totals_by_Amounts",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Sales_Totals_by_Amount"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Sales_Totals_by_Amounts",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Sales_Totals_by_Amounts" ],
        "summary" : "Delete Sales_Totals_by_Amounts",
        "description" : "Delete entity in EntitySet Sales_Totals_by_Amounts",
        "operationId" : "deleteSales_Totals_by_Amounts",
        "responses" : {
          "204" : {
            "description" : "EntitySet Sales_Totals_by_Amounts successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Sales_Totals_by_Amounts" ],
        "summary" : "Update entity Sales_Totals_by_Amounts",
        "description" : "Update an existing entity in EntitySet: Sales_Totals_by_Amounts",
        "operationId" : "updateSales_Totals_by_Amounts",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Sales_Totals_by_Amount"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Sales_Totals_by_Amounts",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: OrderID, CompanyName",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Summary_of_Sales_by_Quarters*" : {
      "get" : {
        "tags" : [ "Summary_of_Sales_by_Quarters" ],
        "summary" : "Get Summary_of_Sales_by_Quarters",
        "description" : "Returns the entity: Summary_of_Sales_by_Quarters. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Summary_of_Sales_by_Quarters supports <b>no</b> navigational properties.",
        "operationId" : "getSummary_of_Sales_by_Quarters",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShippedDate"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShippedDate"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Summary_of_Sales_by_Quarters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Summary_of_Sales_by_Quarter"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Summary_of_Sales_by_Quarters({Id})*" : {
      "get" : {
        "tags" : [ "Summary_of_Sales_by_Quarters" ],
        "summary" : "Get Summary_of_Sales_by_Quarters on Id",
        "description" : "Returns the entity: Summary_of_Sales_by_Quarters. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Summary_of_Sales_by_Quarters supports <b>no</b> navigational properties.",
        "operationId" : "getSummary_of_Sales_by_QuartersId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShippedDate"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Summary_of_Sales_by_Quarters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Summary_of_Sales_by_Quarter"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Summary_of_Sales_by_Quarters" ],
        "summary" : "Create a new entity Summary_of_Sales_by_Quarters",
        "description" : "Create a new entity in EntitySet: Summary_of_Sales_by_Quarters",
        "operationId" : "createSummary_of_Sales_by_Quarters",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Summary_of_Sales_by_Quarter"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Summary_of_Sales_by_Quarters",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Summary_of_Sales_by_Quarters" ],
        "summary" : "Delete Summary_of_Sales_by_Quarters",
        "description" : "Delete entity in EntitySet Summary_of_Sales_by_Quarters",
        "operationId" : "deleteSummary_of_Sales_by_Quarters",
        "responses" : {
          "204" : {
            "description" : "EntitySet Summary_of_Sales_by_Quarters successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Summary_of_Sales_by_Quarters" ],
        "summary" : "Update entity Summary_of_Sales_by_Quarters",
        "description" : "Update an existing entity in EntitySet: Summary_of_Sales_by_Quarters",
        "operationId" : "updateSummary_of_Sales_by_Quarters",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Summary_of_Sales_by_Quarter"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Summary_of_Sales_by_Quarters",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: OrderID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/Summary_of_Sales_by_Years*" : {
      "get" : {
        "tags" : [ "Summary_of_Sales_by_Years" ],
        "summary" : "Get Summary_of_Sales_by_Years",
        "description" : "Returns the entity: Summary_of_Sales_by_Years. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Summary_of_Sales_by_Years supports <b>no</b> navigational properties.",
        "operationId" : "getSummary_of_Sales_by_Years",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShippedDate"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Filter items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.5. Filter System Query Option ($filter)</a> for more information.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Order items by property values. See <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">4.2. Orderby System Query Option ($orderby)</a> for more information.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShippedDate"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Show only the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Skip the first n items",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "$inlinecount",
          "in" : "query",
          "description" : "Include count of items",
          "schema" : {
            "type" : "string",
            "enum" : [ "allpages", "none" ]
          }
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Summary_of_Sales_by_Years",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Summary_of_Sales_by_Year"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/Summary_of_Sales_by_Years({Id})*" : {
      "get" : {
        "tags" : [ "Summary_of_Sales_by_Years" ],
        "summary" : "Get Summary_of_Sales_by_Years on Id",
        "description" : "Returns the entity: Summary_of_Sales_by_Years. For more information using the query parameters please see: <a target=\"_blank\" href=\"https://www.odata.org/documentation/odata-version-2-0/uri-conventions/\">URI Conventions (OData Version 2.0)</a><br />The entity: Summary_of_Sales_by_Years supports <b>no</b> navigational properties.",
        "operationId" : "getSummary_of_Sales_by_YearsId",
        "parameters" : [ {
          "name" : "$expand",
          "in" : "query",
          "description" : "The syntax of a $expand query option is a comma-separated list of Navigation Properties. Additionally each Navigation Property can be followed by a forward slash and another Navigation Property to enable identifying a multi-level relationship.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$select",
          "in" : "query",
          "description" : "The value of a $select System Query Option is a comma-separated list of selection clauses. Each selection clause may be a Property name, Navigation Property name, or the \"*\" character.",
          "schema" : {
            "type" : "string"
          },
          "example" : "ShippedDate"
        }, {
          "name" : "$format",
          "in" : "query",
          "description" : "Response format if supported by the backend service.",
          "schema" : {
            "type" : "string",
            "enum" : [ "atom", "xml", "json" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "EntitySet Summary_of_Sales_by_Years",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Summary_of_Sales_by_Year"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Summary_of_Sales_by_Years" ],
        "summary" : "Create a new entity Summary_of_Sales_by_Years",
        "description" : "Create a new entity in EntitySet: Summary_of_Sales_by_Years",
        "operationId" : "createSummary_of_Sales_by_Years",
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Summary_of_Sales_by_Year"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "EntitySet Summary_of_Sales_by_Years",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Summary_of_Sales_by_Years" ],
        "summary" : "Delete Summary_of_Sales_by_Years",
        "description" : "Delete entity in EntitySet Summary_of_Sales_by_Years",
        "operationId" : "deleteSummary_of_Sales_by_Years",
        "responses" : {
          "204" : {
            "description" : "EntitySet Summary_of_Sales_by_Years successfully deleted",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Summary_of_Sales_by_Years" ],
        "summary" : "Update entity Summary_of_Sales_by_Years",
        "description" : "Update an existing entity in EntitySet: Summary_of_Sales_by_Years",
        "operationId" : "updateSummary_of_Sales_by_Years",
        "requestBody" : {
          "description" : "The entity to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Summary_of_Sales_by_Year"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "EntitySet Summary_of_Sales_by_Years",
            "content" : {
              "application/json" : { }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "Id",
        "in" : "path",
        "description" : "Id supports: OrderID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    }
  },
  "components" : {
    "schemas" : {
      "Category" : {
        "type" : "object",
        "properties" : {
          "CategoryID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "CategoryName" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : false
          },
          "Description" : {
            "maxLength" : 2147483647,
            "type" : "string",
            "nullable" : true
          },
          "Picture" : {
            "maxLength" : 2147483647,
            "type" : "string",
            "format" : "binary",
            "nullable" : true
          }
        }
      },
      "Invoice" : {
        "type" : "object",
        "properties" : {
          "ShipName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : true
          },
          "ShipAddress" : {
            "maxLength" : 60,
            "type" : "string",
            "nullable" : true
          },
          "ShipCity" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "ShipRegion" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "ShipPostalCode" : {
            "maxLength" : 10,
            "type" : "string",
            "nullable" : true
          },
          "ShipCountry" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "CustomerID" : {
            "maxLength" : 5,
            "type" : "string",
            "nullable" : true
          },
          "CustomerName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "Address" : {
            "maxLength" : 60,
            "type" : "string",
            "nullable" : true
          },
          "City" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "Region" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "PostalCode" : {
            "maxLength" : 10,
            "type" : "string",
            "nullable" : true
          },
          "Country" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "Salesperson" : {
            "maxLength" : 31,
            "type" : "string",
            "nullable" : false
          },
          "OrderID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "OrderDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "RequiredDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ShippedDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ShipperName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "ProductID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "ProductName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "UnitPrice" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "Quantity" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "Discount" : {
            "type" : "string",
            "nullable" : false
          },
          "ExtendedPrice" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "Freight" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Customer" : {
        "type" : "object",
        "properties" : {
          "CustomerID" : {
            "maxLength" : 5,
            "type" : "string",
            "nullable" : false
          },
          "CompanyName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "ContactName" : {
            "maxLength" : 30,
            "type" : "string",
            "nullable" : true
          },
          "ContactTitle" : {
            "maxLength" : 30,
            "type" : "string",
            "nullable" : true
          },
          "Address" : {
            "maxLength" : 60,
            "type" : "string",
            "nullable" : true
          },
          "City" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "Region" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "PostalCode" : {
            "maxLength" : 10,
            "type" : "string",
            "nullable" : true
          },
          "Country" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "Phone" : {
            "maxLength" : 24,
            "type" : "string",
            "nullable" : true
          },
          "Fax" : {
            "maxLength" : 24,
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Sales_by_Category" : {
        "type" : "object",
        "properties" : {
          "CategoryID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "CategoryName" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : false
          },
          "ProductName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "ProductSales" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Sales_Totals_by_Amount" : {
        "type" : "object",
        "properties" : {
          "SaleAmount" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "OrderID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "CompanyName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "ShippedDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "Summary_of_Sales_by_Quarter" : {
        "type" : "object",
        "properties" : {
          "ShippedDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "OrderID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "Subtotal" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Product" : {
        "type" : "object",
        "properties" : {
          "ProductID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "ProductName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "SupplierID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "CategoryID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "QuantityPerUnit" : {
            "maxLength" : 20,
            "type" : "string",
            "nullable" : true
          },
          "UnitPrice" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "UnitsInStock" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "UnitsOnOrder" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "ReorderLevel" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "Discontinued" : {
            "type" : "boolean",
            "nullable" : false
          }
        }
      },
      "Alphabetical_list_of_product" : {
        "type" : "object",
        "properties" : {
          "ProductID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "ProductName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "SupplierID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "CategoryID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "QuantityPerUnit" : {
            "maxLength" : 20,
            "type" : "string",
            "nullable" : true
          },
          "UnitPrice" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "UnitsInStock" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "UnitsOnOrder" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "ReorderLevel" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "Discontinued" : {
            "type" : "boolean",
            "nullable" : false
          },
          "CategoryName" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : false
          }
        }
      },
      "Customer_and_Suppliers_by_City" : {
        "type" : "object",
        "properties" : {
          "City" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "CompanyName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "ContactName" : {
            "maxLength" : 30,
            "type" : "string",
            "nullable" : true
          },
          "Relationship" : {
            "maxLength" : 9,
            "type" : "string",
            "nullable" : false
          }
        }
      },
      "Order_Details_Extended" : {
        "type" : "object",
        "properties" : {
          "OrderID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "ProductID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "ProductName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "UnitPrice" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "Quantity" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "Discount" : {
            "type" : "string",
            "nullable" : false
          },
          "ExtendedPrice" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Category_Sales_for_1997" : {
        "type" : "object",
        "properties" : {
          "CategoryName" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : false
          },
          "CategorySales" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Products_by_Category" : {
        "type" : "object",
        "properties" : {
          "CategoryName" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : false
          },
          "ProductName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "QuantityPerUnit" : {
            "maxLength" : 20,
            "type" : "string",
            "nullable" : true
          },
          "UnitsInStock" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "Discontinued" : {
            "type" : "boolean",
            "nullable" : false
          }
        }
      },
      "Summary_of_Sales_by_Year" : {
        "type" : "object",
        "properties" : {
          "ShippedDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "OrderID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "Subtotal" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Shipper" : {
        "type" : "object",
        "properties" : {
          "ShipperID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "CompanyName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "Phone" : {
            "maxLength" : 24,
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Product_Sales_for_1997" : {
        "type" : "object",
        "properties" : {
          "CategoryName" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : false
          },
          "ProductName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "ProductSales" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Supplier" : {
        "type" : "object",
        "properties" : {
          "SupplierID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "CompanyName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "ContactName" : {
            "maxLength" : 30,
            "type" : "string",
            "nullable" : true
          },
          "ContactTitle" : {
            "maxLength" : 30,
            "type" : "string",
            "nullable" : true
          },
          "Address" : {
            "maxLength" : 60,
            "type" : "string",
            "nullable" : true
          },
          "City" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "Region" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "PostalCode" : {
            "maxLength" : 10,
            "type" : "string",
            "nullable" : true
          },
          "Country" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "Phone" : {
            "maxLength" : 24,
            "type" : "string",
            "nullable" : true
          },
          "Fax" : {
            "maxLength" : 24,
            "type" : "string",
            "nullable" : true
          },
          "HomePage" : {
            "maxLength" : 2147483647,
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Order_Subtotal" : {
        "type" : "object",
        "properties" : {
          "OrderID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "Subtotal" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Order" : {
        "type" : "object",
        "properties" : {
          "OrderID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "CustomerID" : {
            "maxLength" : 5,
            "type" : "string",
            "nullable" : true
          },
          "EmployeeID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "OrderDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "RequiredDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ShippedDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ShipVia" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "Freight" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "ShipName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : true
          },
          "ShipAddress" : {
            "maxLength" : 60,
            "type" : "string",
            "nullable" : true
          },
          "ShipCity" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "ShipRegion" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "ShipPostalCode" : {
            "maxLength" : 10,
            "type" : "string",
            "nullable" : true
          },
          "ShipCountry" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Territory" : {
        "type" : "object",
        "properties" : {
          "TerritoryID" : {
            "maxLength" : 20,
            "type" : "string",
            "nullable" : false
          },
          "TerritoryDescription" : {
            "maxLength" : 50,
            "type" : "string",
            "nullable" : false
          },
          "RegionID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          }
        }
      },
      "Products_Above_Average_Price" : {
        "type" : "object",
        "properties" : {
          "ProductName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "UnitPrice" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "Orders_Qry" : {
        "type" : "object",
        "properties" : {
          "OrderID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "CustomerID" : {
            "maxLength" : 5,
            "type" : "string",
            "nullable" : true
          },
          "EmployeeID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "OrderDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "RequiredDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ShippedDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ShipVia" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "Freight" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "ShipName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : true
          },
          "ShipAddress" : {
            "maxLength" : 60,
            "type" : "string",
            "nullable" : true
          },
          "ShipCity" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "ShipRegion" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "ShipPostalCode" : {
            "maxLength" : 10,
            "type" : "string",
            "nullable" : true
          },
          "ShipCountry" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "CompanyName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          },
          "Address" : {
            "maxLength" : 60,
            "type" : "string",
            "nullable" : true
          },
          "City" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "Region" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "PostalCode" : {
            "maxLength" : 10,
            "type" : "string",
            "nullable" : true
          },
          "Country" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Current_Product_List" : {
        "type" : "object",
        "properties" : {
          "ProductID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "ProductName" : {
            "maxLength" : 40,
            "type" : "string",
            "nullable" : false
          }
        }
      },
      "Employee" : {
        "type" : "object",
        "properties" : {
          "EmployeeID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "LastName" : {
            "maxLength" : 20,
            "type" : "string",
            "nullable" : false
          },
          "FirstName" : {
            "maxLength" : 10,
            "type" : "string",
            "nullable" : false
          },
          "Title" : {
            "maxLength" : 30,
            "type" : "string",
            "nullable" : true
          },
          "TitleOfCourtesy" : {
            "maxLength" : 25,
            "type" : "string",
            "nullable" : true
          },
          "BirthDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "HireDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "Address" : {
            "maxLength" : 60,
            "type" : "string",
            "nullable" : true
          },
          "City" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "Region" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "PostalCode" : {
            "maxLength" : 10,
            "type" : "string",
            "nullable" : true
          },
          "Country" : {
            "maxLength" : 15,
            "type" : "string",
            "nullable" : true
          },
          "HomePhone" : {
            "maxLength" : 24,
            "type" : "string",
            "nullable" : true
          },
          "Extension" : {
            "maxLength" : 4,
            "type" : "string",
            "nullable" : true
          },
          "Photo" : {
            "maxLength" : 2147483647,
            "type" : "string",
            "format" : "binary",
            "nullable" : true
          },
          "Notes" : {
            "maxLength" : 2147483647,
            "type" : "string",
            "nullable" : true
          },
          "ReportsTo" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "PhotoPath" : {
            "maxLength" : 255,
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "CustomerDemographic" : {
        "type" : "object",
        "properties" : {
          "CustomerTypeID" : {
            "maxLength" : 10,
            "type" : "string",
            "nullable" : false
          },
          "CustomerDesc" : {
            "maxLength" : 2147483647,
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "Region" : {
        "type" : "object",
        "properties" : {
          "RegionID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "RegionDescription" : {
            "maxLength" : 50,
            "type" : "string",
            "nullable" : false
          }
        }
      },
      "Order_Detail" : {
        "type" : "object",
        "properties" : {
          "OrderID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "ProductID" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "UnitPrice" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "Quantity" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : false
          },
          "Discount" : {
            "type" : "string",
            "nullable" : false
          }
        }
      }
    }
  }
}